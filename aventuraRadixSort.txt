Practica 5: Algoritmo de Radix utilizando TBB.

El objetivo de la practica es la de tratar de implementar el algoritmo de radix sort mediante el uso de la programación paralela vía 
Intel TBB. 
Acómpañenmme en este viaje de 1 día para implementar la práctica.
En primer lugar, se ha revisado el temario junto a los ejemplos facilitados en el github del profesorado: https://github.com/wisaaco/AA_Parallel_Programming_Lab
(la ausencia de comentarios en el código, además de deprimirme me dificulta su entendimiento, pues la combinación del lenguaje C++ junto a los métodos de la librería TBB son dolores de cabeza).

En segundo lugar, se ha investigado en qué consiste el Radix Sort secuencial. 
La idea de Radix Sort consiste en ordenar dígito a dígito un array de enteros, desde el menos significativo al más para el caso del LSD. Pese a que no esté sujeto este algoritmo a enteros, nos ceñiremos a una ordenanza de carácter numérica de enteros dado que en la práctica se pide ordenar un vector.

Me ha servido mucho para entender su funcionamiento el ejemplo de ejecución de: 
https://es.wikipedia.org/wiki/Ordenamiento_Radix

Aún se está por decidir si estos enteros serán decimales o binarios. Pienso que el paso a binario simplificaría el algoritmo pues a priori pienso que su implementación será la siguiente.

Habrá una variable contador que vaya de 0 a n, siendo N el valor máximo dígitos del array. (esto sería estupendo en el caso de secuencial, trataría únicamente de ir iterando).
Para este contador es un poco irrelevante si se trabaja en binario o decimal, pues su utilización será la misma.
El problema viene cuando hay que comparar todos los dígitos del array entre ellos. en el caso de que sean en binario será cuestión de clasificarlos entre [0 o 1] y avanzar el contador. Para el caso de decimal se clasifican de [0 a 9] (como en el ejemplo mencionado en el enlace).
Desconozco si a nivel de sintaxis hay una forma de optimizar esto en TBB. Pienso que, sería interesante para la paralelización de este algoritmo tener K hilos, cada uno que se encargue de clasificar un único valor designado de 0 a 9, pero por otro lado, soy completamente consciente que la paralelización óptima debe ser con la variable contador n mencionada al inicio, para que revisen todos los valores de los array paralelamente y ahorrar tiempo de esa forma. Y por lo tanto teniendo en mente esa programación, tener una clasificación de 0 o 1 valores me parece mucho más sencillo.

A partir de aquí ya es probar y preguntarme ¿qué elementos vistos en clase nos serán útiles? (Reduce, Scan, Partition, Scatter, Gather, Asking_For_Help).            
Reduce no nos será útil por su naturaleza? Nos interesa los Collective patterns pues trabajamos con un conjunto de valores de un vector.
Scan sí parece ser útil, será este el método que se tratará de implementar como función acumuladora de la clasificación de dígitos. En el ejemplo de las diapos figura un Maximum(), esto es lo que pretendemos realizar en cierta forma. Además de que en la diapositiva 109 directamente pone que SCAN es útil para implementar radix sort o quicksort (gracias por ahorrarme trabajo y dudas en saber cómo hacerlo).
Como se implementa? Jesús no entiendo nada de las diapos. el ejemplo 6 PackingProblem parece utilizar lo que queremos.
En la diapositiva 122 se plantea el ejercicio y nos confirma la forma de hacerlo: hay que pasar los valores a binario.

De hecho el ejericio PackingProblem es perfecto para usarlo como esqueleto pues implementa los métodos que necesitaremos para el radix sort.
DoMAP será el encargado de preparar los valores del array en formato binario, repetiremos x veces el proceso, x siendo el número de valores que haya en el array, de ahí que se utilice el map. El filtro tiene que funcionar como una máscara, según lo que he entendido en las diapositivas. Por lo tanto si mi máscara es 001, al multiplicarlo por el valor en binario del digito del vector dará 0 si no se corresponde a la posición del 1 de la propia máscara (una máscara de toda la vida, es con una and).
En: (https://www.freecodecamp.org/news/cpp-operator-examples/) he encontrado que el operador en binario del and se referncia con '&' en C++.
Una vez realizado el map, procederemos a hacer el doSCAN. Si el map es correcto, no deberíamos de requerir modificar el SCAN del modelo, pues como tal queremos que haga exactamente lo mismo. Irá acumulando valores de '1'  y gracias a eso lo utilizaremos para ordenar en un futuro el array de entrada, SCAN devolverá un array de índices ordenados.

El método doMAPFilter es el que luego se ha de encargar de volver a montar los valores (todavía no lo entiendo).
Por lo que puedo leer en el código sin adaptar, se le pasa el array de indices, como el de la entrada original, y el del mapeo y con esos 3 hace una reestructuración ordenada? (tendría más sentido, pues con un índice a secas no haces nada, no sabes distinguir si ese '2' que puede estar en una posición del array corresponde a 011(3), 101(5), 1001(9)...).

En este punto llevo un rato largo tratando de sacar el algoritmo, pero a la que intento ejecutar lo poco que he modificado me explota mucho, y el terminal no me da información al respecto de donde está el fallo. Era normal que algo así pasara puesto que no he tocado nunca este lenguaje ni esta librería, y a estas alturas estoy tratando de aprender todos los conocimientos prácticos en un día. Por desgracia y en la situación en la que me encuentro, no voy a poder arreglarlo.
A partir de ahora y el poco tiempo que me queda voy a tratar de acabar el algoritmo sin ejecutarlo y al menos dejar programada una versión no funcional, pero lo más correcta posible a nivel lógico.

Ejecutando el 6_example_PackingProblem me devuelve el resultado del map vector, el scan vector y el filtered vector, de la manera correcta. Me resulta sospechosamente parecido el radixSort con el programa facilitado de ejemplo, hasta el punto de preguntarme si lo he entendido bien, pues pretendo que el programa devuelva unos valores similares con la diferencia de que con el mapeado se utiliza una máscara binaria.



Después de pruebas e intentos para hacer el algoritmo ciertamente hay cosas que no he entendido. No funciona, para empezar, y no he modificado nada más que el map inicial, pues tanto el SCAN como el procedimiento en el main deberían ser iguales.
1.Creas máscara y la aplicas al MAP para tener tu array mapeado y listo para meterlo en el SCAN.
2.Realizas el SCAN, se ejecuta tal y como está y devuelve un array de indices enteros.
3.Haces el merge de todo junto al MAP, la entrada inicial y la salida del SCAN y lo tienes ordenado.

El MAPFilter estoy seguro que hay que hacer algo más, pero no soy capaz de entender siquiera como lo mergea todo paralelamente.
También hay que considerar que el algoritmo de radix se ejecuta en múltiples iteraciones, debiendose repetir tantas veces como enteros haya en el array de entrada, de manera que la máscara vaya avanzando de su vlaor 00001 inicial a 00010, 00100... hasta que todos los bits de entrada estén cubiertos.
Siendo que el valor de salida de un ciclo correspondería al de entrada del ciclo siguiente. 
No sé, ni estoy seguro de que sea así puesto que es todo paralelo. Quizás se pretende que el cálculo sea todo a la vez y no tener que hacerlo secuencial, o a lo mejor en el propio esqueleto ya se tiene presente, pero por lo que he entendido no es así.

Sea como fuere, se me ha terminado el tiempo.